<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GROMACS | Yassir Boulaamane</title>
    <link>https://yboulaamane.github.io/tags/gromacs/</link>
      <atom:link href="https://yboulaamane.github.io/tags/gromacs/index.xml" rel="self" type="application/rss+xml" />
    <description>GROMACS</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Fri, 04 Apr 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://yboulaamane.github.io/media/icon_hu_4d696a8ace2a642b.png</url>
      <title>GROMACS</title>
      <link>https://yboulaamane.github.io/tags/gromacs/</link>
    </image>
    
    <item>
      <title>Step-by-Step MD Simulation of a Protein–Ligand Complex with GROMACS</title>
      <link>https://yboulaamane.github.io/blog/an-in-depth-guide-to-md-simulation-and-analysis-of-a-proteinligand-complex/</link>
      <pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://yboulaamane.github.io/blog/an-in-depth-guide-to-md-simulation-and-analysis-of-a-proteinligand-complex/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This post walks through the &lt;strong&gt;complete setup of a protein–ligand MD simulation&lt;/strong&gt; with GROMACS.&lt;br&gt;
We use &lt;strong&gt;CHARMM36&lt;/strong&gt; for proteins, &lt;strong&gt;CGenFF&lt;/strong&gt; for ligands, and the &lt;strong&gt;TIP3P water model&lt;/strong&gt;.&lt;br&gt;
Each step is explained briefly before showing the corresponding command.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-0-pdbfixer&#34;&gt;Step 0: PDBFixer&lt;/h2&gt;
&lt;p&gt;We begin by repairing the input PDB file (adding missing atoms, hydrogens, etc.). This ensures the protein structure is suitable for simulations.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda activate pdbfixer
pdbfixer protein.pdb --output=protein_fixed.pdb
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-1-extract-and-clean-the-protein&#34;&gt;Step 1: Extract and clean the protein&lt;/h2&gt;
&lt;p&gt;Next, we separate the ligand (UNK or cofactors like FAD) and clean the protein file.&lt;br&gt;
This avoids force field issues caused by unknown residues.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grep UNK protein.pdb &amp;gt; unk.pdb
grep -v &amp;quot;UNK&amp;quot; protein.pdb &amp;gt; clean.pdb

grep -v -e &amp;quot;UNK&amp;quot; -e &amp;quot;FAD&amp;quot; protein_fixed.pdb &amp;gt; clean.pdb

conda activate pdbfixer
pdbfixer clean.pdb --output=clean.pdb
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-2-generate-protein-topology&#34;&gt;Step 2: Generate protein topology&lt;/h2&gt;
&lt;p&gt;We use &lt;code&gt;pdb2gmx&lt;/code&gt; to generate the topology of the clean protein with CHARMM36.&lt;br&gt;
Here we also choose protonation states interactively.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx pdb2gmx -f clean.pdb -o processed.gro -ter -ignh &amp;lt;&amp;lt; EOF
1
1
0
0
0
0
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-3-convert-ligand-to-mol2-format&#34;&gt;Step 3: Convert ligand to MOL2 format&lt;/h2&gt;
&lt;p&gt;The ligand is converted to &lt;code&gt;.mol2&lt;/code&gt; format with hydrogens added and atom typing corrected.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;obabel unk.pdb -O unk.mol2 --addh --gen3d
sed -i &#39;2s/.*/UNK/; s/UNK1/UNK/g&#39; unk.mol2
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-4-sort-ligand-bonds&#34;&gt;Step 4: Sort ligand bonds&lt;/h2&gt;
&lt;p&gt;We ensure the bond ordering in the MOL2 file is consistent using a Perl script.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;perl sort_mol2_bonds.pl unk.mol2 unk_fix.mol2
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-5-parameterize-the-ligand-with-cgenff&#34;&gt;Step 5: Parameterize the ligand with CGenFF&lt;/h2&gt;
&lt;p&gt;The ligand is parameterized using &lt;strong&gt;CGenFF&lt;/strong&gt;, and converted to a GROMACS-compatible format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/mdrun/silcsbio.2024.1/cgenff/cgenff unk_fix.mol2 -f unk.str
chmod +x cgenff_charmm2gmx.py

conda activate cgenff
python cgenff_charmm2gmx.py UNK unk_fix.mol2 unk.str charmm36-jul2022.ff

rm cgenff_charmm2gmx.py
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-6-convert-ligandcofactor-to-gromacs-format&#34;&gt;Step 6: Convert ligand/cofactor to GROMACS format&lt;/h2&gt;
&lt;p&gt;We now generate &lt;code&gt;.gro&lt;/code&gt; files for both the ligand and cofactor (if present).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx editconf -f unk_ini.pdb -o unk.gro
gmx editconf -f fad_ini.pdb -o fad.gro
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-7-merge-protein-and-ligands&#34;&gt;Step 7: Merge protein and ligands&lt;/h2&gt;
&lt;p&gt;We merge the protein, ligand, and optional cofactors into one structure file.&lt;br&gt;
Atom counts are updated to reflect the combined system.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp processed.gro complex.gro &amp;amp;&amp;amp; sed -i &#39;$d&#39; complex.gro &amp;amp;&amp;amp; tail -n +3 unk.gro &amp;gt;&amp;gt; complex.gro &amp;amp;&amp;amp; echo &amp;quot;   &amp;quot; &amp;gt;&amp;gt; complex.gro

num1=$(sed -n &#39;2p&#39; complex.gro)
num2=$(sed -n &#39;2p&#39; unk.gro)
sum=$((num1 + num2))
sed -i &amp;quot;2s/.*/ $sum/&amp;quot; complex.gro
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For protein + FAD + UNK:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp processed.gro complex.gro &amp;amp;&amp;amp; \
sed -i &#39;$d&#39; complex.gro &amp;amp;&amp;amp; \
tail -n +3 fad.gro &amp;gt;&amp;gt; complex.gro &amp;amp;&amp;amp; \
tail -n +3 unk.gro &amp;gt;&amp;gt; complex.gro &amp;amp;&amp;amp; \
echo &amp;quot;   &amp;quot; &amp;gt;&amp;gt; complex.gro

num1=$(sed -n &#39;2p&#39; processed.gro)
num2=$(sed -n &#39;2p&#39; fad.gro)
num3=$(sed -n &#39;2p&#39; unk.gro)
sum=$((num1 + num2 + num3))
sed -i &amp;quot;2s/.*/ $sum/&amp;quot; complex.gro
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-8-update-topology-file&#34;&gt;Step 8: Update topology file&lt;/h2&gt;
&lt;p&gt;We edit &lt;code&gt;topol.top&lt;/code&gt; to include the ligand topologies and parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i &#39;/; Include Position restraint file/{:a;N;/#endif/!ba;s/\n#endif\n/\n#endif/;s/#endif/#endif\n\n; Include ligand topology\n#include &amp;quot;unk.itp&amp;quot;/}&#39; topol.top

sed -i &#39;/; Include forcefield parameters/{:a;N;/#include &amp;quot;.\/charmm36-jul2022.ff\/forcefield.itp&amp;quot;/!ba;s/#include &amp;quot;.\/charmm36-jul2022.ff\/forcefield.itp&amp;quot;/&amp;amp;\n\n; Include ligand parameters\n#include &amp;quot;unk.prm&amp;quot;/}&#39; topol.top

sed -i &#39;/\[ molecules \]/,/Protein_chain_A/ {/Protein_chain_A/ a\\nUNK                 1\n}&#39; topol.top
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For FAD + UNK:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i &#39;/; Include Position restraint file/{:a;N;/#endif/!ba;s/#endif/#endif\n\n; Include ligand topologies\n#include &amp;quot;fad.itp&amp;quot;\n#include &amp;quot;unk.itp&amp;quot;/}&#39; topol.top

sed -i &#39;/; Include forcefield parameters/{:a;N;/#include &amp;quot;.\/charmm36-jul2022.ff\/forcefield.itp&amp;quot;/!ba;s|#include &amp;quot;.\/charmm36-jul2022.ff\/forcefield.itp&amp;quot;|&amp;amp;\n\n; Include ligand parameters\n#include &amp;quot;fad.prm&amp;quot;\n#include &amp;quot;unk.prm&amp;quot;|}&#39; topol.top

sed -i &#39;/\[ molecules \]/,/Protein_chain_A/ {/Protein_chain_A/ a\\nFAD                 1\\nUNK                 1\n}&#39; topol.top
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-9-define-box-and-solvate&#34;&gt;Step 9: Define box and solvate&lt;/h2&gt;
&lt;p&gt;We place the system in a cubic box with a 1.4 nm buffer and solvate with TIP3P water.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx editconf -f complex.gro -o newbox.gro -bt cubic -c -d 1.4
gmx solvate -cp newbox.gro -cs spc216.gro -p topol.top -o solv.gro
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-10-add-ions&#34;&gt;Step 10: Add ions&lt;/h2&gt;
&lt;p&gt;We neutralize the system and add physiological salt concentration (0.15 M NaCl).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; ions.mdp
integrator     = steep
emtol          = 1000.0
nsteps         = 50000
cutoff-scheme  = Verlet
coulombtype    = PME
rcoulomb       = 1.0
rvdw           = 1.0
constraints    = none
EOF

gmx grompp -f ions.mdp -c solv.gro -p topol.top -o ions.tpr -maxwarn 3
gmx genion -s ions.tpr -o solv_ions.gro -p topol.top -pname NA -nname CL -neutral -conc 0.15 &amp;lt;&amp;lt;EOF
15
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-11-energy-minimization&#34;&gt;Step 11: Energy minimization&lt;/h2&gt;
&lt;p&gt;We relax steric clashes by running a steepest descent minimization.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx grompp -f em.mdp -c solv_ions.gro -p topol.top -o em.tpr
gmx mdrun -v -deffnm em
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-12-generate-ligand-restraints&#34;&gt;Step 12: Generate ligand restraints&lt;/h2&gt;
&lt;p&gt;Ligand restraints are generated for equilibration to avoid large displacements.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx make_ndx -f unk.gro -o index_unk.ndx &amp;lt;&amp;lt; EOF
0 &amp;amp; ! a H*
q
EOF

gmx genrestr -f unk.gro -n index_unk.ndx -o posre_unk.itp -fc 1000 1000 1000 &amp;lt;&amp;lt;EOF
3
EOF

sed -i &#39;/; Include water topology/{x;s/.*/\n; Ligand position restraints\n#ifdef POSRES\n#include &amp;quot;posre_unk.itp&amp;quot;\n#endif\n/;G}&#39; topol.top
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-13-create-index-for-complex&#34;&gt;Step 13: Create index for complex&lt;/h2&gt;
&lt;p&gt;We define a custom index file including protein and ligand groups.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx make_ndx -f solv_ions.gro -o index.ndx &amp;lt;&amp;lt; EOF
1 | 13
q
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-14-nvt-equilibration&#34;&gt;Step 14: NVT equilibration&lt;/h2&gt;
&lt;p&gt;We equilibrate temperature at 300 K with position restraints.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx grompp -f nvt.mdp -c solv_ions.gro -r solv_ions.gro -p topol.top -n index.ndx -o nvt.tpr
gmx mdrun -deffnm nvt
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-15-npt-equilibration&#34;&gt;Step 15: NPT equilibration&lt;/h2&gt;
&lt;p&gt;We equilibrate pressure at 1 bar using the Parrinello-Rahman barostat.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx grompp -f npt.mdp -c nvt.gro -t nvt.cpt -r nvt.gro -p topol.top -n index.ndx -o npt.tpr
gmx mdrun -deffnm npt
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;step-16-production-md&#34;&gt;Step 16: Production MD&lt;/h2&gt;
&lt;p&gt;Finally, we run a 100 ns production simulation in the NPT ensemble.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gmx grompp -f md.mdp -c npt.gro -t npt.cpt -p topol.top -n index.ndx -o md_0_100.tpr
gmx mdrun -deffnm md_0_100
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;notes&#34;&gt;Notes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Always &lt;strong&gt;fix PBC&lt;/strong&gt; before analysis.&lt;/li&gt;
&lt;li&gt;Discard the first &lt;strong&gt;5–10 ns&lt;/strong&gt; of equilibration before data collection.&lt;/li&gt;
&lt;li&gt;Stable &lt;strong&gt;RMSD, Rg, SASA&lt;/strong&gt; values indicate good simulation behavior.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;PCA/FEL&lt;/strong&gt; to explore large-scale motions and free energy landscapes.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GMXPlotter</title>
      <link>https://yboulaamane.github.io/project/gmxplotter/</link>
      <pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://yboulaamane.github.io/project/gmxplotter/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
